[{"categories":null,"content":"What does the Klarna invoice email look like Many merchants ask about the consumer experience when using Klarna invoice, specifically how the consumer recieves the IBAN and bank details. We will not return the IBAN on API level (as e.g. RatePay does), as Klarna does not follow this type of white label approach. They want to position their brand directly towards the consumer. At a minimum, the consumer will receive an email that looks like this Additionally, if the consumer uses the Klarna App, they will find their due payment there as well, and can also choose to pay via Direct Debit, move the due date, pay in installments, and much more. There is no need to print the IBAN from Klarna on the merchant invoice. This will only confuse consumers, as they are typically used to this. Merchant should clearly state on their invoices that payment is needs to go to Klarna, and not the merchant’s bank account. ","date":"2022-12-07","objectID":"/klarna-iban-invoice-email/:0:0","tags":null,"title":"Klarna Iban Invoice Email","uri":"/klarna-iban-invoice-email/"},{"categories":null,"content":"How to connect your PayPal Account to Mollie Log in to Mollie Dashboard Settings \u003e Profiles \u003e Desired Profile Activate the toggle next to PayPal, should look like this: Click the button, get redirected to PayPal, enter PayPal Business email Then login normally There might be a permissions screen Finally, there should be a confirmation: Looks like this when you click the button and go back to Mollie ","date":"2022-12-07","objectID":"/how-to-connect-paypal-to-mollie/:0:0","tags":null,"title":"How to Connect Paypal to Mollie","uri":"/how-to-connect-paypal-to-mollie/"},{"categories":null,"content":"Server to Server Card Tokenization with Mollie Mollie in theory has an endpoint for server-to-server card tokenization. In order to have this explained to you, you have to provide a valid PCI DSS Attestation of Compliance. This endpoint is, unfortunately, not suitable for card tokenization from an App context, as the Access-Control-Allow-Origin HTTP Header prevents this (I think, I don’t really do frontend). See the Further Reading sections for In-App alternatives. Upon further consideration, it might certainly be possible to ignore the Access-Control-Allow-Origin Header in App contexts - someone would need to try this out and tell me about it. ","date":"2022-12-06","objectID":"/server-to-server-credit-card-tokenization/:0:0","tags":null,"title":"Server to Server Credit Card Tokenization","uri":"/server-to-server-credit-card-tokenization/"},{"categories":null,"content":"Further reading Mollie Demo Checkout for iOS: https://github.com/mollie/demo-checkout-ios Mollie Demo Checkout for Android: https://github.com/mollie/demo-checkout-android Mollie Demo Checkout Backend: https://github.com/mollie/demo-checkout-backend ","date":"2022-12-06","objectID":"/server-to-server-credit-card-tokenization/:1:0","tags":null,"title":"Server to Server Credit Card Tokenization","uri":"/server-to-server-credit-card-tokenization/"},{"categories":null,"content":"Webhook calls fail with 401 Unauthorized The merchant probably is using a .htaccess file to restrict access to their stage environment. In order for our webhooks to get delivered, the merchant needs to add our IP addresses to the allow-list. ","date":"2022-12-06","objectID":"/webhook-401-htaccess/:0:0","tags":null,"title":"Webhook 401 Htaccess","uri":"/webhook-401-htaccess/"},{"categories":null,"content":"How to add IP addresses to the allow list See here. ","date":"2022-12-06","objectID":"/webhook-401-htaccess/:1:0","tags":null,"title":"Webhook 401 Htaccess","uri":"/webhook-401-htaccess/"},{"categories":null,"content":"What are Mollie’s IP addresses? See our help center ","date":"2022-12-06","objectID":"/webhook-401-htaccess/:2:0","tags":null,"title":"Webhook 401 Htaccess","uri":"/webhook-401-htaccess/"},{"categories":null,"content":"Magento 2: Status vs. State Ah yes, the joy of Magento’s “Status vs. State”. It’s actually funny, if it wasn’t so sad. And also the slight dyslexia (and/or lack of command of the Latin language) of the person who wrote the response doesn’t help either. Let’s think this through. Capitalized nouns indicate Magento concepts. fixed width font indicates a fixed technical term. ","date":"2022-12-06","objectID":"/magento-2-state-vs-status/:0:0","tags":null,"title":"Magento 2 State vs Status","uri":"/magento-2-state-vs-status/"},{"categories":null,"content":"There is State: Orders have States. State denotes what technically currently is happening to the order (eg. processing meaning an Order is being prepared but isn’t complete yet). There actually is a fairly simple default state machine for Order States: new -\u003e processing -\u003e complete. Those are the mandatory States. The others are there for eventualities, like waiting for async payment, or for fully refunded Orders. The States are fixed, you can’t add new arbitrary ones. They trigger certain events within Magento as well, like Invoice creation. States can have a label, but that is typically only visible in the backend. ","date":"2022-12-06","objectID":"/magento-2-state-vs-status/:1:0","tags":null,"title":"Magento 2 State vs Status","uri":"/magento-2-state-vs-status/"},{"categories":null,"content":"Then there is Status (which the provider of the answer spells “states”): A Status builds on top of the core concept of Order State, and is intended to give more information to consumers or store owners about what’s happening to an Order, beyond the scope of the limited Order State Machine. It’s merely a label and has no bearing on the core business processes happening to an order (e.g. you cannot generate an Invoice from an Order hitting a certain Status alone, you’d need to transition it to a State in order to trigger that. You can set Order Status conditionally, e.g. only for Orders with a selected Payment Method. Let’s consider two examples: Order with Credit Card: The Order is created (State new), we confirm the Payment, and State now is processing. A potential Status here could be “Payment received”. The Order would get shipped and State would turn to completed. Order on invoice (not BNPL, let’s assume classic invoice payment): The Order is created (State new), but no payment has been made yet. Order State progresses directly to processing, but Status here would rather be something like “Order has been shipped”. We could even read out the package delivery API and set Status to “Order delivered at dd-mm-yyyy, awaiting invoice payment”, while the Order State remains in processing. Only when the invoice payment is received, we set State to completed. Hope the examples illustrate why you need Status while maintaining the same State Machine. ","date":"2022-12-06","objectID":"/magento-2-state-vs-status/:2:0","tags":null,"title":"Magento 2 State vs Status","uri":"/magento-2-state-vs-status/"},{"categories":null,"content":"Further reading https://magecomp.com/blog/difference-magento-order-status-order-state-magento-2/ https://experienceleague.adobe.com/docs/commerce-admin/stores-sales/order-management/orders/order-status.html ","date":"2022-12-06","objectID":"/magento-2-state-vs-status/:3:0","tags":null,"title":"Magento 2 State vs Status","uri":"/magento-2-state-vs-status/"},{"categories":null,"content":"Accounting with Mollie In the following, I will explain how, from my point of view, accounting for Mollie payments should be done by default (my accounts are only borrowed from SKR04 as an example) ","date":"2021-10-21","objectID":"/accounting-with-mollie-fundamentals/:0:0","tags":null,"title":"Accounting With Mollie Fundamentals","uri":"/accounting-with-mollie-fundamentals/"},{"categories":null,"content":"Chart of accounts 4000 Income 69999 Customer 1300 Receivables from Mollie 1460 Payments in transit 1700 Bank 6850 Costs of monetary transactions ","date":"2021-10-21","objectID":"/accounting-with-mollie-fundamentals/:1:0","tags":null,"title":"Accounting With Mollie Fundamentals","uri":"/accounting-with-mollie-fundamentals/"},{"categories":null,"content":"Import of orders and payments (accounts receivable), triggered by the event “New order” Import of orders from Shop/ERP: Here a posting record Debtor to Revenue is created, for example: 100€ 69999 to 4000: Import of payment from Mollie (here it is important that the payment has also already been made, so there is also a capture at Klarna): Receivables against Mollie to debtor, 100€ 1300 to 69999: The debtor is now credited and the receivable against Mollie has increased. Of course, this is now repeated several times for all sales and payments. ","date":"2021-10-21","objectID":"/accounting-with-mollie-fundamentals/:1:1","tags":null,"title":"Accounting With Mollie Fundamentals","uri":"/accounting-with-mollie-fundamentals/"},{"categories":null,"content":"Import of a settlement, triggered by the event “Mollie creates a settlement” Retrieving the settlement from the API, here a posting record Payment in transit to Receivables against Mollie is created, for example 95€ 1460 to 1300: So now we expect a payment receipt from Mollie on the bank in the amount of 95€. The missing 5€ are exemplarily the fees that Mollie has withheld in the context of this payment. However, these are not yet fixed, since we have not yet received a receipt from Mollie for the fees. The payments or captures contained in the settlement can be retrieved and reconciled via the corresponding endpoints below the settlement. This is now repeated whenever Mollie generates a new settlement according to the payout frequency. ","date":"2021-10-21","objectID":"/accounting-with-mollie-fundamentals/:1:2","tags":null,"title":"Accounting With Mollie Fundamentals","uri":"/accounting-with-mollie-fundamentals/"},{"categories":null,"content":"Posting of the Mollie disbursement, triggered by the event “A Mollie disbursement transaction is in bank import” Here, a posting record bank to disbursement in transit is created, for example €95 1700 to 1460: So the expected settlement is now posted, we do not expect any further payment from Mollie until a new settlement is generated. ","date":"2021-10-21","objectID":"/accounting-with-mollie-fundamentals/:1:3","tags":null,"title":"Accounting With Mollie Fundamentals","uri":"/accounting-with-mollie-fundamentals/"},{"categories":null,"content":"Posting of payment fees, triggered by the event “Mollie issues an invoice” on the first business day of a month for the period of the previous month Retrieving the invoice via the API or the PDF document from the dashboard. This is where the posting record Cost of Money Transactions to Receivables against Mollie is created, for example €5 6850 to 1300: Most likely, there is also an “Invoice Compensation” line item on the invoice that adjusts rounding differences in your favor when calculating the charges. ","date":"2021-10-21","objectID":"/accounting-with-mollie-fundamentals/:1:4","tags":null,"title":"Accounting With Mollie Fundamentals","uri":"/accounting-with-mollie-fundamentals/"},{"categories":null,"content":"Webinar: Mollie loves PWA “Mollie loves PWA” was a webinar held in September 2021 on PWA technologies specifically for Magento 2. ","date":"2021-09-23","objectID":"/mollie-loves-pwa/:1:0","tags":null,"title":"Mollie Loves Pwa","uri":"/mollie-loves-pwa/"},{"categories":null,"content":"Webinar: Technology fundamentals - HTTP In this webinar HTTP is explained. It’s one of the most fundamental web technologies, and the basis for RESTful APIs: ","date":"2021-02-24","objectID":"/technology-fundamentals-http/:1:0","tags":null,"title":"Technology Fundamentals Http","uri":"/technology-fundamentals-http/"}]